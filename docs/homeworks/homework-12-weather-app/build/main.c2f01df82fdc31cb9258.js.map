{"version":3,"sources":["webpack:///./js/getGeoPosition.js","webpack:///./js/fetchWeather.js","webpack:///./index.js"],"names":["options","BASE_URL","ACCESS_KEY","Refs","location","document","querySelector","temp","humidity","wind","conditions","submit","icon","weather","fetchWeather","latitude","longitude","fetch","then","response","json","data","console","log","textContent","name","current","temperature","wind_speed","weather_descriptions","src","weather_icons","alt","addEventListener","e","preventDefault","searchCity","currentTarget","elements","city","value","classList","remove","maximumAge","timeout","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","coords","catch","error"],"mappings":"qKACQA,ECDFC,EAAW,sCACXC,EAAa,mCAEbC,EAAO,CACXC,SAAUC,SAASC,cAAc,+BACjCC,KAAMF,SAASC,cAAc,2BAC7BE,SAAUH,SAASC,cAAc,+BACjCG,KAAMJ,SAASC,cAAc,2BAC7BI,WAAYL,SAASC,cAAc,iCACnCK,OAAQN,SAASC,cAAc,gBAC/BM,KAAMP,SAASC,cAAc,SAC7BO,QAASR,SAASC,cAAc,aAGnB,SAASQ,EAAaC,EAAUC,GAC7CC,MAAShB,EAAJ,eAA2BC,EAA3B,UAA+Ca,EAA/C,IAA2DC,GAC7DE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZlB,EAAKC,SAASoB,YAAcH,EAAKjB,SAASqB,KAC1CtB,EAAKI,KAAKiB,YAAcH,EAAKK,QAAQC,YACrCxB,EAAKK,SAASgB,YAAcH,EAAKK,QAAQlB,SACzCL,EAAKM,KAAKe,YAAcH,EAAKK,QAAQE,WACrCzB,EAAKO,WAAWc,YAAcH,EAAKK,QAAQG,qBAC3C1B,EAAKS,KAAKkB,IAAMT,EAAKK,QAAQK,cAC7B5B,EAAKS,KAAKoB,IAAMX,EAAKK,QAAQG,uBAGnC1B,EAAKQ,OAAOsB,iBAAiB,SAE7B,SAAiCC,GAC/BA,EAAEC,iBACF,IAAMC,EAAaF,EAAEG,cAAcC,SAASC,KAAKC,MACjDrC,EAAKU,QAAQ4B,UAAUC,OAAO,aAC9B5B,EAAasB,GACbF,EAAEG,cAAcC,SAASC,KAAKC,MAAQ,MDlChCxC,EAAU,CACd2C,WAAY,KACZC,QAAS,KAEJ,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,UAAUC,YAAYC,mBACpBJ,EAASC,EAAQ/C,MEFNkB,KAAK,SAAAd,GACpB,MAAO,CACLW,SAAUX,EAAS+C,OAAOpC,SAC1BC,UAAWZ,EAAS+C,OAAOnC,aAE5BE,KAAK,SAACiC,GACPrC,EAAaqC,EAAOpC,SAAUoC,EAAOnC,aACpCoC,MAAM,SAAAC,GACP/B,QAAQC,IAAI8B","file":"main.c2f01df82fdc31cb9258.js","sourcesContent":["export default function getGeoPosition() {\r\n  const options = {\r\n    maximumAge: 36000000,\r\n    timeout: 5000,\r\n  };\r\n  return new Promise((resolve, reject) => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      resolve, reject, options);\r\n  })\r\n};\r\n","const BASE_URL = 'http://api.weatherstack.com/current';\r\nconst ACCESS_KEY = '9a99e705f4a76202bd804cc156dbd555';\r\n\r\nconst Refs = {\r\n  location: document.querySelector('span[data-field=\"location\"]'),\r\n  temp: document.querySelector('span[data-field=\"temp\"]'),\r\n  humidity: document.querySelector('span[data-field=\"humidity\"]'),\r\n  wind: document.querySelector('span[data-field=\"wind\"]'),\r\n  conditions: document.querySelector('span[data-field=\"conditions\"]'),\r\n  submit: document.querySelector('.search-form'),\r\n  icon: document.querySelector('.icon'),\r\n  weather: document.querySelector('#weather'),\r\n};\r\n\r\nexport default function fetchWeather(latitude, longitude) {\r\n  fetch(`${BASE_URL}?access_key=${ACCESS_KEY}&query=${latitude},${longitude}`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log(data);\r\n      Refs.location.textContent = data.location.name;\r\n      Refs.temp.textContent = data.current.temperature;\r\n      Refs.humidity.textContent = data.current.humidity;\r\n      Refs.wind.textContent = data.current.wind_speed;\r\n      Refs.conditions.textContent = data.current.weather_descriptions;\r\n      Refs.icon.src = data.current.weather_icons;\r\n      Refs.icon.alt = data.current.weather_descriptions;\r\n    });\r\n}\r\nRefs.submit.addEventListener('submit', searchFormSubmitHandler);\r\n\r\nfunction searchFormSubmitHandler(e) {\r\n  e.preventDefault();\r\n  const searchCity = e.currentTarget.elements.city.value;\r\n  Refs.weather.classList.remove('is-hidden');\r\n  fetchWeather(searchCity);\r\n  e.currentTarget.elements.city.value = '';\r\n}\r\n","import './styles.css';\nimport getGeoPosition from './js/getGeoPosition';\nimport fetchWeather from './js/fetchWeather';\n\n\ngetGeoPosition().then(location => {\n  return {\n    latitude: location.coords.latitude,\n    longitude: location.coords.longitude,\n  }\n}).then((coords) => {\n  fetchWeather(coords.latitude, coords.longitude);\n}).catch(error => {\n  console.log(error);\n});\n"],"sourceRoot":""}